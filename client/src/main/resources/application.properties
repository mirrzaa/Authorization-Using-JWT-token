########################
#Client Side
########################
server.port=9090
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=mirza1997
spring.datasource.initialization-mode=always
spring.datasource.continue-on-error=true
spring.devtools.restart.enabled=false
spring.devtools.livereload.enabled=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.show-sql=false
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database=postgresql
auth.server.base.url=http://localhost:8888
jwt.signing.key=ymLTU8rq83...asfasfasgasgasgasasgasgasga


#//            SecretKey key = Keys.hmacShaKeyFor(signingKey.getBytes(StandardCharsets.UTF_8));
#//            Map<String, String> map = new HashMap<>();
#//            map.put("username", username);
#//            String jwt = Jwts.builder()
#//                    .setClaims(map)
#//                    .signWith(key)
#//                    .compact();
#//            httpServletResponse.setHeader("Authorization", jwt);
#
#//
#//            Algorithm algorithm = Algorithm.HMAC256("secret".getBytes());
#//            String access_token = JWT.create()
#//                    .withSubject(username)
#//                    .withExpiresAt(new Date(System.currentTimeMillis() + 10 * 60 * 1000))
#//                    .withIssuer(httpServletRequest.getRequestURL().toString())
#////                    .withClaim("roles", user.getAuthorities().stream().map(GrantedAuthority::getAuthority).collect(Collectors.toList()))
#//                    .sign(algorithm);
#//
#//            String refresh_token = JWT.create()
#//                    .withSubject(username)
#//                    .withExpiresAt(new Date(System.currentTimeMillis() + 30 * 60 * 1000))
#//                    .withIssuer(httpServletRequest.getRequestURL().toString())
#//                    .sign(algorithm);
#//            SecretKey key = Keys.hmacShaKeyFor(signingKey.getBytes(StandardCharsets.UTF_8));
#//            Claims claims = Jwts.parserBuilder()
#//                    .setSigningKey(key)
#//                    .build()
#//                    .parseClaimsJws(jwt)
#//                    .getBody();
#//
#//            String username = String.valueOf(claims.get("username"));
#//            GrantedAuthority a = new SimpleGrantedAuthority("user");
#//            String code = "Bearer " + jwt;
#//            Authentication auth = new UsernamePasswordAuthentication(username, code);
#//            SecurityContextHolder.getContext().setAuthentication(auth);
#
#//        AuthenticationManager authenticationManager = applicationContext.getBean(AuthenticationManager.class);
#//        auth = authenticationManager.authenticate(auth);
#//        ResponseEntity<User[]> array = restTemplate.getForEntity(url, User[].class);